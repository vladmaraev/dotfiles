(require 'package)

(package-initialize 'noactivate)
      (eval-when-compile
        (require 'use-package))

(use-package diminish)

(setq user-full-name "Vladislav Maraev"
      user-mail-address "vladislav.maraev@gu.se")

(setq custom-file "~/.emacs.d/custom.el")
(load custom-file t)

(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions -1)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
(setq auto-save-interval 80)

(setq mac-option-key-is-meta t)
(setq mac-command-key-is-meta nil)
(setq mac-command-modifier 'super)
(setq mac-option-modifier 'meta)
(setq mac-right-option-modifier nil)
(setq mac-left-command-modifier nil)

;; (require 'powerline)
;; (setq powerline-default-separator 'slant)
;; (setq powerline-display-buffer-size t)
;; (setq powerline-display-hud t)
;; (setq powerline-gui-use-vcs-glyph nil)
;; (remove-hook 'focus-out-hook 'powerline-unset-selected-window) ;; mac hack


(require 'dired-x)

(defun finder-here ()
  (interactive)
  (dired-smart-shell-command "open -a Finder $PWD" nil nil))

(defun iterm-here ()
  (interactive)
  (dired-smart-shell-command "open -a iTerm2 $PWD" nil nil))


(require 'consult)
(consult-customize
 consult-line :add-history t)

(use-package boon
  :diminish boon-local-mode)
(require 'boon-qwerty)
(boon-mode)
(require 'boon-tutorial)
;; (require 'boon-powerline)
;; (boon-powerline-theme)

;; for keyboard with no ESC
(define-key boon-command-map "¬ß" 'boon-quit)
(define-key boon-special-map "¬ß" 'boon-set-command-state)
(define-key boon-insert-map "¬ß" 'boon-set-command-state)
(define-key global-map "¬ß" 'keyboard-quit)
(define-key minibuffer-local-map "¬ß" 'keyboard-quit)
(define-key minibuffer-local-ns-map "¬ß" 'keyboard-quit)
(define-key minibuffer-local-completion-map "¬ß" 'keyboard-quit)
(define-key minibuffer-local-must-match-map "¬ß" 'keyboard-quit)
(define-key isearch-mode-map "¬ß" 'isearch-abort)


(define-key boon-x-map ";" 'boon-toggle-comment)
(define-key boon-x-map "g" 'magit-status)
(define-key boon-x-map "a" 'org-agenda)
(define-key boon-x-map "c" 'org-capture)
(define-key boon-x-map "t" 'vterm)

(define-key boon-x-map "b" 'consult-buffer)
(define-key boon-x-map "m" 'mu4e)

(define-key boon-goto-map "o" 'counsel-org-goto)
(define-key boon-command-map "/" 'hs-toggle-hiding)

;; Non-Boon keys
(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "M-s") 'consult-git-grep)
(global-set-key (kbd "C-0") 'iterm-here)
(global-set-key (kbd "C-9") 'finder-here)

;; Agda input
(setq default-input-method "Agda")

;; Russian typewriter QWERTY
(quail-define-package
 "russian-mac" "Russian" "RU" nil
 "–ô–¶–£–ö–ï–ù Russian Mac layout"
 nil t t t t nil nil nil nil nil t)
(quail-define-rules
 ;; row 1
 ("¬ß" ?¬ß) ("1" ?‚Ññ) ("2" ?-) ("3" ?/) ("4" ?\") ("5" ?:) 
 ("6" ?,) ("7" ?.) ("8" ?*) ("9" ??) ("0" ?%) ("-" ?!) ("=" ?\;)
 ;; row 2
 ("q" ?–π) ("w" ?—Ü) ("e" ?—É) ("r" ?–∫) ("t" ?–µ) ("y" ?–Ω) ("u" ?–≥) ("i" ?—à)
 ("o" ?—â) ("p" ?–∑) ("[" ?—Ö) ("]" ?—ä)
 ;; row 3
 ("a" ?—Ñ) ("s" ?—ã) ("d" ?–≤) ("f" ?–∞) ("g" ?–ø) ("h" ?—Ä) ("j" ?–æ) ("k" ?–ª)
 ("l" ?–¥) (";" ?–∂) ("\'" ?—ç) ("\\" ?\))
 ;; row
 ("z" ?—è) ("x" ?—á) ("c" ?—Å) ("v" ?–º) ("b" ?–∏) ("n" ?—Ç) ("m" ?—å)
 ("," ?–±) ("." ?—é) ("/" ?—ë)
 ;; Shift row 1
 ("¬±" ?+) ("!" ?1) ("@" ?2) ("¬£" ?3) ("$" ?4) ("%" ?5) ("^" ?6) ("&" ?7)
 ("*" ?8) ("(" ?9) (")" ?0) ("_" ?=) 
 ;; Shift row 2
 ("Q" ?–ô) ("W" ?–¶) ("E" ?–£) ("R" ?–ö) ("T" ?–ï) ("Y" ?–ù) ("U" ?–ì) ("I" ?–®)
 ("O" ?–©) ("P" ?–ó) ("{" ?–•) ("}" ?–™)
 ;; Shift row 3
 ("A" ?–§) ("S" ?–´) ("D" ?–í) ("F" ?–ê) ("G" ?–ü) ("H" ?–†) ("J" ?–û) ("K" ?–õ)
 ("L" ?–î) (":" ?–ñ) ("\"" ?–≠) ("|" ?\()
 ;; Shift row
 ("Z" ?–Ø) ("X" ?–ß) ("C" ?–°) ("V" ?–ú) ("B" ?–ò) ("N" ?–¢) ("M" ?–¨)
 ("<" ?–ë) (">" ?–Æ) ("?" ?–Å))

 ;;;;;;;;;;;;;;;;;;;;;;;;;;
;; UI

;; Remove crap
(setq inhibit-splash-screen t)
(tool-bar-mode -1)
(setq ring-bell-function 'ignore)
(toggle-scroll-bar -1) 
(pixel-scroll-precision-mode t)



;; Fonts
;; (require 'unicode-fonts)
;; (require 'persistent-soft) ; To cache the fonts and reduce load time
;; (unicode-fonts-setup)
(set-face-attribute 'default nil
                    :family "Lexia Mono"
		    :weight 'normal ; üêÇ üêÇ
                    :height 170)
(setq-default line-spacing 0) ; default 0

(set-face-attribute 'mode-line nil :font "Lexia Mono-15")
(set-face-attribute 'mode-line-inactive nil :font "Lexia Mono-15")

(add-hook 'minibuffer-setup-hook 'my-minibuffer-setup)
(defun my-minibuffer-setup ()
       (set (make-local-variable 'face-remapping-alist)
          '((default :height 150))))


;; JP's themes
(use-package est)

(est-plan9)
;; (powerline-reset)

;; Show matching parentheses
(show-paren-mode 1)
(setq show-paren-delay 0)


(vertico-mode)
(use-package vertico-directory
  :load-path "~/.emacs.d/lisp/vertico/extensions/"
  :bind (:map vertico-map
		("RET" . vertico-directory-enter)
		("DEL" . vertico-directory-delete-char)
		("M-DEL" . vertico-directory-delete-word))
)


(recentf-mode)
(savehist-mode)

(use-package orderless
  :init
  ;;  Configure a custom style dispatcher (see the Consult wiki)
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles basic partial-completion)))))

(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

(use-package marginalia
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))

(use-package embark
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package corfu
  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-auto-delay 0.5)
  (corfu-commit-predicate nil)   ;; Do not commit selected candidates on next input
  (corfu-quit-at-boundary t)     ;; Automatically quit at word boundary
  (corfu-quit-no-match t)        ;; Automatically quit if there is no match
  ;; (corfu-echo-documentation nil) ;; Do not show documentation in the echo area
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin
  ;; (corfu-preview-current nil)    ;; Do not preview current candidate
  

  ;; Optionally use TAB for cycling, default is `corfu-complete'.
  :bind (:map corfu-map
         ("TAB" . corfu-next)
         ([tab] . corfu-next)
         ("S-TAB" . corfu-previous)
         ([backtab] . corfu-previous))

  ;; You may want to enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since dabbrev can be used globally (M-/).
  :init
  (global-corfu-mode))

(use-package dabbrev
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand)))

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ORG

(setq org-latex-pdf-process '("latexmk -xelatex -quiet -shell-escape -f %f"))
(use-package org-contrib
  :pin manual
  :load-path "~/.emacs.d/lisp/org-contrib/lisp/"
  :config
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines)))

(setq org-latex-with-hyperref nil)    
(add-to-list 'org-latex-default-packages-alist "\\PassOptionsToPackage{hidelinks}{hyperref}")  

(add-hook 'org-mode-hook #'visual-line-mode)
(add-hook 'org-mode-hook #'org-indent-mode)
(add-hook 'auto-save-hook #'org-save-all-org-buffers)

(use-package org-bullets
  :hook (org-mode . org-bullets-mode))

(setq org-hide-emphasis-markers t)

(setq org-export-with-smart-quotes t) 
(add-to-list 'org-export-smart-quotes-alist 
             '("british"
               (primary-opening :utf-8 "‚Äò" :html "&lsquo;" :latex "`" :texinfo "`")
               (primary-closing :utf-8 "‚Äô" :html "&rsquo;" :latex "'" :texinfo "'")
               (secondary-opening :utf-8 "‚Äú" :html "&ldquo;" :latex "``" :texinfo "``")
               (secondary-closing :utf-8 "‚Äù" :html "&rdquo;" :latex "\'\'" :texinfo "\'\'")
               (apostrophe :utf-8 "‚Äô" :html "&rsquo;")))


;; Calendar
(add-hook 'calendar-load-hook
         (lambda ()
            (calendar-set-date-style 'european)))
(setq calendar-week-start-day 1)

;; Org-babel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((gnuplot . t)
   (shell . t)))
(setq org-confirm-babel-evaluate nil)


;; Agenda
(progn
  (add-to-list 'org-agenda-files "~/org/planner.org")
  (add-to-list 'org-agenda-files "~/org/common/art.org")
  (add-to-list 'org-agenda-files "~/org/common/french.org")
  (setq org-agenda-window-setup 'current-window)
  
  (add-hook 'after-init-hook 'org-agenda-list)
  (setq org-default-notes-file "~/org/planner.org")
  (setq org-agenda-start-on-weekday nil))

;; Track habits
(require 'org-habit)

(require 'org-inlinetask)

;; Latex as link
(org-add-link-type "latex" nil (lambda (path desc format) (cond ((eq
        format 'latex) (format "\\%s{%s}" path desc)))))

(setq org-latex-create-formula-image-program 'dvisvgm)

;; org-capture
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/planner.org" "Tasks")
         "* TODO %?\n  %i\n  %a")
        ("f" "Tickler" entry (file+headline "~/org/planner.org" "Tickler")
         "* %? %^t %^g\n %i\n")
	("b" "Bookmark" entry (file+headline "~/org/bookmarks.org" "Bookmarks")
	 "* %(org-cliplink-capture)%?\n" :unnarrowed t)
	("j" "Journal entry" plain
         (file+olp+datetree "~/org/journal.org")
         "%^{GLUTEN}p%^{SLEEP}p%^{ALCOHOL}p%^{EXERCISE}p" :tree-type week :immediate-finish t)
        ("s" "Swedish card" entry (file+headline "~/org/swe.org" "Swedish words") "* word\n:PROPERTIES:\n:DRILL_CARD_TYPE: hide1cloze\n:END:\nSw: [%^{Swe}]\nEn: [%^{Eng}]" :immediate-finish t
	)))

(require 'epa-file)
(epa-file-enable)
(fset 'epg-wait-for-status 'ignore)

(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance '("crypt"))
(setq org-crypt-key nil)
(setq epa-file-select-keys "0A6A67D83FBD77DB") 

(setq org-clock-idle-time 10)


;; citations


(setq shell-file-name "zsh"
      shell-command-switch "-ic")

(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))

(defvar *afilename-cmd*
  '(("/Users/xmarvl/org/library/library.bib" . "cleanlibrary"))
  "File association list with their respective command.")

(defun my/cmd-after-saved-file ()
  "Execute a command after saved a specific file."
  (let* ((match (assoc (buffer-file-name) *afilename-cmd*)))
    (when match
      (message (concat "Executing: " (cdr match)))
      (with-temp-buffer (async-shell-command (cdr match))))))

(add-hook 'after-save-hook 'my/cmd-after-saved-file)

(use-package citar
  :bind (("C-c b" . citar-insert-reference)
         :map minibuffer-local-map
         ("M-b" . citar-insert-preset))
  :custom
  (org-cite-global-bibliography '())
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)
  (citar-notes-paths '("~/org/library/notes/"))
  (citar-library-paths '("~/org/library/pdfs/"))
  (citar-bibliography org-cite-global-bibliography))


(use-package citar-embark
  :after citar embark
  :no-require
  :config (citar-embark-mode))

(setq citar-at-point-function 'embark-act)

;; (use-package tree-sitter
;;   :config
;;   ;; activate tree-sitter on any buffer containing code for which it has a parser available
;;   ;; (global-tree-sitter-mode)
;;   ;; you can easily see the difference tree-sitter-hl-mode makes for python, ts or tsx
;;   ;; by switching on and off
;;   (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

;; (use-package tree-sitter-langs
;;   :after tree-sitter)

(use-package typescript-mode
  :config
  (define-derived-mode typescriptreact-mode typescript-mode
    "TypeScript TSX")
  (add-to-list 'auto-mode-alist '("\\.tsx?\\'" . typescriptreact-mode))  
  )



(add-hook 'typescript-ts-mode-hook  #'apheleia-mode)
(add-hook 'javascript-mode-hook #'apheleia-mode)
(add-hook 'json-mode-hook #'apheleia-mode)

(setq project-vc-extra-root-markers '("package.json"))

(defun project-root-override (dir)
  "Find DIR's project root by searching for a '.project.el' file.

If this file exists, it marks the project root. For convenient compatibility
with Projectile, '.projectile' is also considered a project root marker.

https://blog.jmthornton.net/p/emacs-project-override"
  (let ((root (or (locate-dominating-file dir ".project.el")
                  (locate-dominating-file dir "package.json")))
        (backend (ignore-errors (vc-responsible-backend dir))))
    (when root (if (version<= emacs-version "28")
                    (cons 'vc root)
                 (list 'vc backend root)))))

(add-hook 'project-find-functions #'project-root-override)

;; deprecate this?
(defun my/project-override (dir)
  (let ((override (locate-dominating-file dir ".project.el")))
    (if override
      (cons 'vc override)
      nil)))

(use-package project
  ;; Cannot use :hook because 'project-find-functions does not end in -hook
  ;; Cannot use :init (must use :config) because otherwise
  ;; project-find-functions is not yet initialized.
  :config
  (add-hook 'project-find-functions #'my/project-override))


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Mail

(require 'mu4e)
(setq mu4e-mu-binary "~/.nix-profile/bin/mu")
(mu4e-marker-icons-mode)
(setq mu4e-use-fancy-chars t)
(setq mail-user-agent 'mu4e-user-agent)


(setq mu4e-get-mail-command "mbsync -a"
      mu4e-update-interval 60
      mu4e-index-update-in-background t
      mu4e-hide-index-messages t)

(setq mu4e-bookmarks 
      '(( :name "ZERO"
          :query "(maildir:/gu/Inbox OR maildir:/gu/backlog)" ;;  AND date:..1w
          :key ?o)
	)
      )

(setq mu4e-maildir-shortcuts nil)

(setq mu4e-contexts
      (list
       (make-mu4e-context
          :name "GU"
          :enter-func (lambda () (mu4e-message "Entering GU context"))
          :leave-func (lambda () (mu4e-message "Leaving GU context"))
          ;; we match based on the contact-fields of the message
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches msg
                            :to "vladislav.maraev@gu.se")))
          :vars '( ( user-mail-address	    . "vladislav.maraev@gu.se"  )
		   ( smtpmail-smtp-user	    . "vladislav.maraev@gu.se"  )
		   (mu4e-drafts-folder . "/gu/Drafts")
		   (mu4e-sent-folder   . "/gu/Sent Items")
		   (mu4e-trash-folder  . "/gu/Deleted Items")
		   (mu4e-refile-folder . "/gu/Archive")
		   ( mu4e-maildir-shortcuts .  ( ("/gu/Inbox"     . ?i)
						 ("/gu/backlog"   . ?b)
						 ("/gu/Sent Items"   . ?s)
                                                 ("/gu/recall"   . ?r)))
		   ))
       (make-mu4e-context
          :name "Talkamatic"
          :enter-func (lambda () (mu4e-message "Switch to the Talkamatic context"))
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches msg
                            :to "vlad@talkamatic.se")))
          :vars '( (user-mail-address	     . "vlad@talkamatic.se" )
		   (smtpmail-smtp-user  . "vlad@talkamatic.se")
		   (mu4e-drafts-folder . "/talkamatic/Drafts")
		   (mu4e-sent-folder   . "/talkamatic/Sent Items")
		   (mu4e-trash-folder  . "/talkamatic/Deleted Items")
		   (mu4e-refile-folder . "/talkamatic/Archive")
		   ( mu4e-maildir-shortcuts .  (("/talkamatic/Inbox"     . ?i)
						("/talkamatic/tala-backlog"   . ?b)
						("/talkamatic/Sent Items"   . ?s)
                                                ("/talkamatic/recall"   . ?r)))
		   ))
       (make-mu4e-context
          :name "maraev.me"
          :enter-func (lambda () (mu4e-message "Switch to the maraev.me context"))
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches msg
                            :to "vlad@maraev.me")))
          :vars '( (user-mail-address	     . "vlad@maraev.me" )
		   (smtpmail-smtp-user  . "vlad@maraev.me")
		   (mu4e-drafts-folder . "/maraevme/[Gmail]/Drafts")
		   (mu4e-sent-folder   . "/maraevme/[Gmail]/Sent Mail")
		   (mu4e-trash-folder  . "/maraevme/[Gmail]/Bin")
		   (mu4e-refile-folder . "/maraevme/[Gmail]/All Mail")
		   ( mu4e-maildir-shortcuts .  (("/maraevme/INBOX"     . ?i)
						("/maraevme/backlog"   . ?b)
						("/maraevme/[Gmail]/Sent Mail"   . ?s)
                                                ("/maraevme/recall"   . ?r)))
		   ))
       ))
(setq mu4e-context-policy 'pick-first)
(setq mu4e-compose-context-policy nil)

       
(setq mu4e-change-filenames-when-moving t)
(setq mu4e-headers-date-format "%d %b %Y"
      mu4e-headers-time-format "%H:%M")
(setq mu4e-split-view 'horizontal)

(setq
  mu4e-index-cleanup t
  mu4e-index-lazy-check nil)

(require 'smtpmail)
(add-hook 'mu4e-compose-mode-hook #'(lambda () (auto-save-mode -1)))
(add-hook 'mu4e-compose-mode-hook #'flyspell-mode)


;;; Call the oauth2ms program to fetch the authentication token
 (defun fetch-access-token ()
   (with-temp-buffer
      (call-process "oauth2ms" nil t nil "--encode-xoauth2")
      (buffer-string)))

 ;;; Add new authentication method for xoauth2
 (cl-defmethod smtpmail-try-auth-method
   (process (_mech (eql xoauth2)) user password)
   (let* ((access-token (fetch-access-token)))
      (smtpmail-command-or-throw
       process
       (concat "AUTH XOAUTH2 " access-token)
       235)))

 ;;; Register the method
 (with-eval-after-load 'smtpmail
   (add-to-list 'smtpmail-auth-supported 'xoauth2))

(setq send-mail-function 'smtpmail-send-it
      starttls-use-gnutls t
      smtpmail-starttls-credentials
      '(("smtp.office365.com" 587 nil nil))
      smtpmail-default-smtp-server "smtp.office365.com"
      smtpmail-smtp-server "smtp.office365.com"
      smtpmail-stream-type  'starttls
      smtpmail-smtp-service 587
      smtpmail-debug-info t)

(setq mu4e-sent-messages-behavior 'delete)
(setq
 mu4e-compose-signature
 (concat "Vladislav Maraev\n"
	 "Postdoctoral researcher\n\n"
	 "Department of Philosophy, Linguistics and Theory of Science\n"
	 "University of Gothenburg"))
(setq mu4e-compose-signature-auto-include nil)

(define-key mu4e-headers-mode-map (kbd "i")  'mu4e-headers-prev)
(define-key mu4e-headers-mode-map (kbd "o")    'mu4e-headers-next)
(define-key mu4e-view-mode-map (kbd "C-k")  'scroll-down-line)
(define-key mu4e-view-mode-map (kbd "C-l")  'scroll-up-line)
(define-key mu4e-view-mode-map (kbd "i")  'mu4e-view-headers-prev)
(define-key mu4e-view-mode-map (kbd "o")    'mu4e-view-headers-next)
(define-key mu4e-view-mode-map (kbd "D")    'boon-treasure-region)
(define-key mu4e-view-mode-map (kbd "l")    'forward-char)
(define-key mu4e-view-mode-map (kbd "k")    'backward-char)


(setq smtpmail-queue-mail nil  ;; start in queuing mode
      smtpmail-queue-dir   "~/Maildir/queue/cur")

(setq message-kill-buffer-on-exit t)

(setq message-citation-line-format "On %d %b %Y at %R, %f wrote:")
(setq message-citation-line-function 'message-insert-formatted-citation-line)

;; opening PDFs
(when (require 'openwith nil 'noerror)
  (setq openwith-associations
        (list
         (list (openwith-make-extension-regexp
                '("pdf"))
               "open"
               '(file))))
  (openwith-mode 1))
(add-to-list  'mm-inhibit-file-name-handlers 'openwith-file-handler)

(setq mu4e-headers-personal-mark '("p" . "")
      mu4e-headers-seen-mark '("S" . "‚úì")
      mu4e-headers-passed-mark '("P" . "‚û´")
      mu4e-headers-replied-mark '("R" . "‚Ü©")
      mu4e-headers-attach-mark '("a" . "‚ù¶")
      mu4e-headers-flagged-mark '("F" . "‚öë")
      mu4e-headers-list-mark '("s" . "‚ãÆ")
      mu4e-headers-new-mark '("N" . "‚ú¶")
      mu4e-headers-draft-mark '("D" . "‚úé"))
(setq mu4e-headers-thread-last-child-prefix '("L" . "‚ï∞ ")
      mu4e-headers-thread-first-child-prefix '("o " . "‚îú ")
      mu4e-headers-thread-orphan-prefix '("o " . "‚îå "))	

(setq mu4e-headers-fields '((:human-date    .   12)
                            (:flags         .    5)
                            (:from-or-to          .   22)
                            (:subject       .   nil)))




(defvar *my-notifier-path* "terminal-notifier")  
(defun my/send-notification (title msg)
  (shell-command 
   (concat *my-notifier-path* " -message \"" msg "\" -title " title " -sound default -sender org.gnu.Emacs")))

(add-hook 'org-timer-done-hook (lambda () (my/send-notification "Org Mode" "It‚Äôs about time!")))


(setq load-path (cons "~/Developer/tidal/" load-path))
(require 'haskell-mode)
(require 'tidal)

(setq tidal-boot-script-path "~/.cabal/share/aarch64-osx-ghc-9.6.1/tidal-1.9.4/BootTidal.hs")

(use-package dante
  :ensure t
  :after haskell-mode
  :commands 'dante-mode
  :init
  (add-hook 'haskell-mode-hook 'dante-mode)
  
  (add-hook 'haskell-mode-hook 'flymake-mode)
  )

(setq flymake-mode-line-lighter t)


(setq dictionary-server "dict.org")

(setq chatgpt-shell-openai-key ""
      chatgpt-shell-model-version "gpt-3.5-turbo")

(setq send-mail-function 'sendmail-query-once)

(set-face-attribute 'variable-pitch nil :font "Lexia-15") ; mu4e

;; (defun mu4e-alert-default-mode-line-formatter (mail-count)
;;   "Default formatter used to get the string to be displayed in the mode-line.
;; MAIL-COUNT is the count of mails for which the string is to displayed."
;;   (when (not (zerop mail-count))
;;     (concat " "
;;             (propertize
;;              "Mail"
;;              'display (when (display-graphic-p)
;;                         display-time-mail-string)  ;; this is the only change!
;;              'face display-time-mail-face
;;              'help-echo (concat (if (= mail-count 1)
;;                                     "You have an unread email"
;;                                   (format "You have %s unread emails" mail-count))
;;                                 "\nClick here to view "
;;                                 (if (= mail-count 1) "it" "them"))
;;              'mouse-face 'mode-line-highlight
;;              'keymap '(mode-line keymap
;;                                  (mouse-1 . mu4e-alert-view-unread-mails)
;;                                  (mouse-2 . mu4e-alert-view-unread-mails)
;;                                  (mouse-3 . mu4e-alert-view-unread-mails)))
;;             (if (zerop mail-count)
;;                 " "
;;               (format "{%d} " mail-count)))))

;; (setq mu4e-alert-interesting-mail-query
;;       (concat
;;        "maildir:"
;;        "\"/gu/backlog\""
;;        "OR maildir:"
;;        "\"/Talkamatic/tala-backlog\""
;; ))
;; (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)

(setq-default indent-tabs-mode nil)

(defun org-latex-timestamp (timestamp _contents info)
  (format-time-string
   "%Y-%m-%d"
   (org-read-date nil t (org-timestamp-translate timestamp))))

(diminish 'apheleia-mode " AœÜ")
(diminish 'overwrite-mode " ow")

(set-fringe-mode 10)

(setq org-drill-learn-fraction 0.42)

(add-to-list 'org-latex-classes
                   '("memoir"
                     "\\documentclass{memoir}
   [NO-DEFAULT-PACKAGES]
   [PACKAGES]
   [EXTRA]
  \\newcommand{\\mboxparagraph}[1]{\\paragraph{#1}\\mbox{}\\\\\\noindent}
  \\newcommand{\\mboxsubparagraph}[1]{\\subparagraph{#1}\\mbox{}\\\\\\noindent}"
                     ("\\part{%s}" . "\\part*{%s}")
                     ("\\chapter{%s}" . "\\chapter*{%s}")
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
		     ))
